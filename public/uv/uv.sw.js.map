{"version":3,"file":"uv.sw.js","mappings":"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","sources":["webpack://@titaniumnetwork-dev/ultraviolet/./src/uv.sw.js"],"sourcesContent":["/*globals __uv$config*/\n// Users must import the config (and bundle) prior to importing uv.sw.js\n// This is to allow us to produce a generic bundle with no hard-coded paths.\n\n/**\n * @type {import('../uv').UltravioletCtor}\n */\nconst Ultraviolet = self.Ultraviolet;\n\nconst cspHeaders = [\n    'cross-origin-embedder-policy',\n    'cross-origin-opener-policy',\n    'cross-origin-resource-policy',\n    'content-security-policy',\n    'content-security-policy-report-only',\n    'expect-ct',\n    'feature-policy',\n    'origin-isolation',\n    'strict-transport-security',\n    'upgrade-insecure-requests',\n    'x-content-type-options',\n    'x-download-options',\n    'x-frame-options',\n    'x-permitted-cross-domain-policies',\n    'x-powered-by',\n    'x-xss-protection',\n];\nconst emptyMethods = ['GET', 'HEAD'];\n\nclass UVServiceWorker extends Ultraviolet.EventEmitter {\n    constructor(config = __uv$config) {\n        super();\n        if (!config.bare) config.bare = '/bare/';\n        if (!config.prefix) config.prefix = '/service/';\n        this.config = config;\n        const addresses = (\n            Array.isArray(config.bare) ? config.bare : [config.bare]\n        ).map((str) => new URL(str, location).toString());\n        this.address = addresses[~~(Math.random() * addresses.length)];\n        /**\n         * @type {InstanceType<Ultraviolet['BareClient']>}\n         */\n        this.bareClient = new Ultraviolet.BareClient(this.address);\n    }\n    /**\n     *\n     * @param {Event & {request: Request}} param0\n     * @returns\n     */\n    async fetch({ request }) {\n        /**\n         * @type {string|void}\n         */\n        let fetchedURL;\n\n        try {\n            if (!request.url.startsWith(location.origin + this.config.prefix))\n                return await fetch(request);\n\n            const ultraviolet = new Ultraviolet(this.config, this.address);\n\n            if (typeof this.config.construct === 'function') {\n                this.config.construct(ultraviolet, 'service');\n            }\n\n            const db = await ultraviolet.cookie.db();\n\n            ultraviolet.meta.origin = location.origin;\n            ultraviolet.meta.base = ultraviolet.meta.url = new URL(\n                ultraviolet.sourceUrl(request.url)\n            );\n\n            const requestCtx = new RequestContext(\n                request,\n                this,\n                ultraviolet,\n                !emptyMethods.includes(request.method.toUpperCase())\n                    ? await request.blob()\n                    : null\n            );\n\n            if (ultraviolet.meta.url.protocol === 'blob:') {\n                requestCtx.blob = true;\n                requestCtx.base = requestCtx.url = new URL(\n                    requestCtx.url.pathname\n                );\n            }\n\n            if (\n                request.referrer &&\n                request.referrer.startsWith(location.origin)\n            ) {\n                const referer = new URL(\n                    ultraviolet.sourceUrl(request.referrer)\n                );\n\n                if (\n                    requestCtx.headers.origin ||\n                    (ultraviolet.meta.url.origin !== referer.origin &&\n                        request.mode === 'cors')\n                ) {\n                    requestCtx.headers.origin = referer.origin;\n                }\n\n                requestCtx.headers.referer = referer.href;\n            }\n\n            const cookies = (await ultraviolet.cookie.getCookies(db)) || [];\n            const cookieStr = ultraviolet.cookie.serialize(\n                cookies,\n                ultraviolet.meta,\n                false\n            );\n\n            requestCtx.headers['user-agent'] = navigator.userAgent;\n\n            if (cookieStr) requestCtx.headers.cookie = cookieStr;\n\n            const reqEvent = new HookEvent(requestCtx, null, null);\n            this.emit('request', reqEvent);\n\n            if (reqEvent.intercepted) return reqEvent.returnValue;\n\n            fetchedURL = requestCtx.blob\n                ? 'blob:' + location.origin + requestCtx.url.pathname\n                : requestCtx.url;\n\n            const response = await this.bareClient.fetch(fetchedURL, {\n                headers: requestCtx.headers,\n                method: requestCtx.method,\n                body: requestCtx.body,\n                credentials: requestCtx.credentials,\n                mode:\n                    location.origin !== requestCtx.address.origin\n                        ? 'cors'\n                        : requestCtx.mode,\n                cache: requestCtx.cache,\n                redirect: requestCtx.redirect,\n            });\n\n            const responseCtx = new ResponseContext(requestCtx, response);\n            const resEvent = new HookEvent(responseCtx, null, null);\n\n            this.emit('beforemod', resEvent);\n            if (resEvent.intercepted) return resEvent.returnValue;\n\n            for (const name of cspHeaders) {\n                if (responseCtx.headers[name]) delete responseCtx.headers[name];\n            }\n\n            if (responseCtx.headers.location) {\n                responseCtx.headers.location = ultraviolet.rewriteUrl(\n                    responseCtx.headers.location\n                );\n            }\n\n            // downloads\n            if (request.destination === 'document') {\n                const header = responseCtx.headers['content-disposition'];\n\n                // validate header and test for filename\n                if (!/\\s*?((inline|attachment);\\s*?)filename=/i.test(header)) {\n                    // if filename= wasn't specified then maybe the remote specified to download this as an attachment?\n                    // if it's invalid then we can still possibly test for the attachment/inline type\n                    const type = /^\\s*?attachment/i.test(header)\n                        ? 'attachment'\n                        : 'inline';\n\n                    // set the filename\n                    const [filename] = new URL(response.finalURL).pathname\n                        .split('/')\n                        .slice(-1);\n\n                    responseCtx.headers[\n                        'content-disposition'\n                    ] = `${type}; filename=${JSON.stringify(filename)}`;\n                }\n            }\n\n            if (responseCtx.headers['set-cookie']) {\n                Promise.resolve(\n                    ultraviolet.cookie.setCookies(\n                        responseCtx.headers['set-cookie'],\n                        db,\n                        ultraviolet.meta\n                    )\n                ).then(() => {\n                    self.clients.matchAll().then(function (clients) {\n                        clients.forEach(function (client) {\n                            client.postMessage({\n                                msg: 'updateCookies',\n                                url: ultraviolet.meta.url.href,\n                            });\n                        });\n                    });\n                });\n                delete responseCtx.headers['set-cookie'];\n            }\n\n            if (responseCtx.body) {\n                switch (request.destination) {\n                    case 'script':\n                    case 'worker':\n                        {\n                            // craft a JS-safe list of arguments\n                            const scripts = [\n                                ultraviolet.bundleScript,\n                                ultraviolet.clientScript,\n                                ultraviolet.configScript,\n                                ultraviolet.handlerScript,\n                            ]\n                                .map((script) => JSON.stringify(script))\n                                .join(',');\n                            responseCtx.body = `if (!self.__uv && self.importScripts) { ${ultraviolet.createJsInject(\n                                this.address,\n                                this.bareClient.manfiest,\n                                ultraviolet.cookie.serialize(\n                                    cookies,\n                                    ultraviolet.meta,\n                                    true\n                                ),\n                                request.referrer\n                            )} importScripts(${scripts}); }\\n`;\n                            responseCtx.body += ultraviolet.js.rewrite(\n                                await response.text()\n                            );\n                        }\n                        break;\n                    case 'style':\n                        responseCtx.body = ultraviolet.rewriteCSS(\n                            await response.text()\n                        );\n                        break;\n                    case 'iframe':\n                    case 'document':\n                        if (\n                            isHtml(\n                                ultraviolet.meta.url,\n                                responseCtx.headers['content-type'] || ''\n                            )\n                        ) {\n                            responseCtx.body = ultraviolet.rewriteHtml(\n                                await response.text(),\n                                {\n                                    document: true,\n                                    injectHead: ultraviolet.createHtmlInject(\n                                        ultraviolet.handlerScript,\n                                        ultraviolet.bundleScript,\n                                        ultraviolet.clientScript,\n                                        ultraviolet.configScript,\n                                        this.address,\n                                        this.bareClient.manfiest,\n                                        ultraviolet.cookie.serialize(\n                                            cookies,\n                                            ultraviolet.meta,\n                                            true\n                                        ),\n                                        request.referrer\n                                    ),\n                                }\n                            );\n                        }\n                }\n            }\n\n            if (requestCtx.headers.accept === 'text/event-stream') {\n                responseCtx.headers['content-type'] = 'text/event-stream';\n            }\n            if (crossOriginIsolated) {\n                responseCtx.headers['Cross-Origin-Embedder-Policy'] =\n                    'require-corp';\n            }\n\n            this.emit('response', resEvent);\n            if (resEvent.intercepted) return resEvent.returnValue;\n\n            return new Response(responseCtx.body, {\n                headers: responseCtx.headers,\n                status: responseCtx.status,\n                statusText: responseCtx.statusText,\n            });\n        } catch (err) {\n            if (!['document', 'iframe'].includes(request.destination))\n                return new Response(undefined, { status: 500 });\n\n            console.error(err);\n\n            return renderError(err, fetchedURL, this.address);\n        }\n    }\n    static Ultraviolet = Ultraviolet;\n}\n\nself.UVServiceWorker = UVServiceWorker;\n\nclass ResponseContext {\n    /**\n     *\n     * @param {RequestContext} request\n     * @param {import(\"@tomphttp/bare-client\").BareResponseFetch} response\n     */\n    constructor(request, response) {\n        this.request = request;\n        this.raw = response;\n        this.ultraviolet = request.ultraviolet;\n        this.headers = {};\n        // eg set-cookie\n        for (const key in response.rawHeaders)\n            this.headers[key.toLowerCase()] = response.rawHeaders[key];\n        this.status = response.status;\n        this.statusText = response.statusText;\n        this.body = response.body;\n    }\n    get url() {\n        return this.request.url;\n    }\n    get base() {\n        return this.request.base;\n    }\n    set base(val) {\n        this.request.base = val;\n    }\n}\n\nclass RequestContext {\n    /**\n     *\n     * @param {Request} request\n     * @param {UVServiceWorker} worker\n     * @param {Ultraviolet} ultraviolet\n     * @param {BodyInit} body\n     */\n    constructor(request, worker, ultraviolet, body = null) {\n        this.ultraviolet = ultraviolet;\n        this.request = request;\n        this.headers = Object.fromEntries(request.headers.entries());\n        this.method = request.method;\n        this.address = worker.address;\n        this.body = body || null;\n        this.cache = request.cache;\n        this.redirect = request.redirect;\n        this.credentials = 'omit';\n        this.mode = request.mode === 'cors' ? request.mode : 'same-origin';\n        this.blob = false;\n    }\n    get url() {\n        return this.ultraviolet.meta.url;\n    }\n    set url(val) {\n        this.ultraviolet.meta.url = val;\n    }\n    get base() {\n        return this.ultraviolet.meta.base;\n    }\n    set base(val) {\n        this.ultraviolet.meta.base = val;\n    }\n}\n\nfunction isHtml(url, contentType = '') {\n    return (\n        (\n            Ultraviolet.mime.contentType(contentType || url.pathname) ||\n            'text/html'\n        ).split(';')[0] === 'text/html'\n    );\n}\n\nclass HookEvent {\n    #intercepted;\n    #returnValue;\n    constructor(data = {}, target = null, that = null) {\n        this.#intercepted = false;\n        this.#returnValue = null;\n        this.data = data;\n        this.target = target;\n        this.that = that;\n    }\n    get intercepted() {\n        return this.#intercepted;\n    }\n    get returnValue() {\n        return this.#returnValue;\n    }\n    respondWith(input) {\n        this.#returnValue = input;\n        this.#intercepted = true;\n    }\n}\n\n/**\n *\n * @param {string} fetchedURL\n * @param {string} bareServer\n * @returns\n */\nfunction hostnameErrorTemplate(fetchedURL, bareServer) {\n    const parsedFetchedURL = new URL(fetchedURL);\n    const script =\n        `remoteHostname.textContent = ${JSON.stringify(\n            parsedFetchedURL.hostname\n        )};` +\n        `bareServer.href = ${JSON.stringify(bareServer)};` +\n        `uvHostname.textContent = ${JSON.stringify(location.hostname)};` +\n        `reload.addEventListener(\"click\", () => location.reload());` +\n        `uvVersion.textContent = ${JSON.stringify(\n            process.env.ULTRAVIOLET_VERSION\n        )};`;\n\n    return (\n        '<!DOCTYPE html>' +\n        '<html>' +\n        '<head>' +\n        \"<meta charset='utf-8' />\" +\n        '<title>Error</title>' +\n        '</head>' +\n        '<body>' +\n        '<h1>This site can’t be reached</h1>' +\n        '<hr />' +\n        '<p><b id=\"remoteHostname\"></b>’s server IP address could not be found.</p>' +\n        '<p>Try:</p>' +\n        '<ul>' +\n        '<li>Verifying you entered the correct address</li>' +\n        '<li>Clearing the site data</li>' +\n        '<li>Contacting <b id=\"uvHostname\"></b>\\'s administrator</li>' +\n        \"<li>Verifying the <a id='bareServer' title='Bare server'>Bare server</a> isn't censored</li>\" +\n        '</ul>' +\n        '<button id=\"reload\">Reload</button>' +\n        '<hr />' +\n        '<p><i>Ultraviolet v<span id=\"uvVersion\"></span></i></p>' +\n        `<script src=\"${\n            'data:application/javascript,' + encodeURIComponent(script)\n        }\"></script>` +\n        '</body>' +\n        '</html>'\n    );\n}\n\n/**\n *\n * @param {string} title\n * @param {string} code\n * @param {string} id\n * @param {string} message\n * @param {string} trace\n * @param {string} fetchedURL\n * @param {string} bareServer\n * @returns\n */\nfunction errorTemplate(\n    title,\n    code,\n    id,\n    message,\n    trace,\n    fetchedURL,\n    bareServer\n) {\n    // produced by bare-server-node\n    if (message === 'The specified host could not be resolved.')\n        return hostnameErrorTemplate(fetchedURL, bareServer);\n\n    // turn script into a data URI so we don't have to escape any HTML values\n    const script =\n        `errorTitle.textContent = ${JSON.stringify(title)};` +\n        `errorCode.textContent = ${JSON.stringify(code)};` +\n        (id ? `errorId.textContent = ${JSON.stringify(id)};` : '') +\n        `errorMessage.textContent =  ${JSON.stringify(message)};` +\n        `errorTrace.value = ${JSON.stringify(trace)};` +\n        `fetchedURL.textContent = ${JSON.stringify(fetchedURL)};` +\n        `bareServer.href = ${JSON.stringify(bareServer)};` +\n        `for (const node of document.querySelectorAll(\"#uvHostname\")) node.textContent = ${JSON.stringify(\n            location.hostname\n        )};` +\n        `reload.addEventListener(\"click\", () => location.reload());` +\n        `uvVersion.textContent = ${JSON.stringify(\n            process.env.ULTRAVIOLET_VERSION\n        )};`;\n\n    return (\n        '<!DOCTYPE html>' +\n        '<html>' +\n        '<head>' +\n        \"<meta charset='utf-8' />\" +\n        '<title>Error</title>' +\n        '</head>' +\n        '<body>' +\n        \"<h1 id='errorTitle'></h1>\" +\n        '<hr />' +\n        '<p>Failed to load <b id=\"fetchedURL\"></b></p>' +\n        '<p id=\"errorMessage\"></p>' +\n        '<table><tbody>' +\n        '<tr><td>Code:</td><td id=\"errorCode\"></td></tr>' +\n        (id ? '<tr><td>ID:</td><td id=\"errorId\"></td></tr>' : '') +\n        '</tbody></table>' +\n        '<textarea id=\"errorTrace\" cols=\"40\" rows=\"10\" readonly></textarea>' +\n        '<p>Try:</p>' +\n        '<ul>' +\n        '<li>Checking your internet connection</li>' +\n        '<li>Verifying you entered the correct address</li>' +\n        '<li>Clearing the site data</li>' +\n        '<li>Contacting <b id=\"uvHostname\"></b>\\'s administrator</li>' +\n        \"<li>Verify the <a id='bareServer' title='Bare server'>Bare server</a> isn't censored</li>\" +\n        '</ul>' +\n        '<p>If you\\'re the administrator of <b id=\"uvHostname\"></b>, try:</p>' +\n        '<ul>' +\n        '<li>Restarting your Bare server</li>' +\n        '<li>Updating Ultraviolet</li>' +\n        '<li>Troubleshooting the error on the <a href=\"https://github.com/titaniumnetwork-dev/Ultraviolet\" target=\"_blank\">GitHub repository</a></li>' +\n        '</ul>' +\n        '<button id=\"reload\">Reload</button>' +\n        '<hr />' +\n        '<p><i>Ultraviolet v<span id=\"uvVersion\"></span></i></p>' +\n        `<script src=\"${\n            'data:application/javascript,' + encodeURIComponent(script)\n        }\"></script>` +\n        '</body>' +\n        '</html>'\n    );\n}\n\n/**\n * @typedef {import(\"@tomphttp/bare-client\").BareError} BareError\n */\n\n/**\n *\n * @param {unknown} err\n * @returns {err is BareError}\n */\nfunction isBareError(err) {\n    return err instanceof Error && typeof err.body === 'object';\n}\n\n/**\n *\n * @param {unknown} err\n * @param {string} fetchedURL\n * @param {string} bareServer\n */\nfunction renderError(err, fetchedURL, bareServer) {\n    /**\n     * @type {number}\n     */\n    let status;\n    /**\n     * @type {string}\n     */\n    let title;\n    /**\n     * @type {string}\n     */\n    let code;\n    let id = '';\n    /**\n     * @type {string}\n     */\n    let message;\n\n    if (isBareError(err)) {\n        status = err.status;\n        title = 'Error communicating with the Bare server';\n        message = err.body.message;\n        code = err.body.code;\n        id = err.body.id;\n    } else {\n        status = 500;\n        title = 'Error processing your request';\n        message = 'Internal Server Error';\n        code = err instanceof Error ? err.name : 'UNKNOWN';\n    }\n\n    return new Response(\n        errorTemplate(\n            title,\n            code,\n            id,\n            message,\n            String(err),\n            fetchedURL,\n            bareServer\n        ),\n        {\n            status,\n            headers: {\n                'content-type': 'text/html',\n            },\n        }\n    );\n}\n"],"names":["Ultraviolet","self","cspHeaders","emptyMethods","UVServiceWorker","EventEmitter","constructor","config","__uv$config","super","bare","prefix","this","addresses","Array","isArray","map","str","URL","location","toString","address","Math","random","length","bareClient","BareClient","async","request","fetchedURL","url","startsWith","origin","fetch","ultraviolet","construct","db","cookie","meta","base","sourceUrl","requestCtx","RequestContext","includes","method","toUpperCase","blob","protocol","pathname","referrer","referer","headers","mode","href","cookies","getCookies","cookieStr","serialize","navigator","userAgent","reqEvent","HookEvent","emit","intercepted","returnValue","response","body","credentials","cache","redirect","responseCtx","ResponseContext","resEvent","name","rewriteUrl","destination","header","test","type","filename","finalURL","split","slice","JSON","stringify","Promise","resolve","setCookies","then","clients","matchAll","forEach","client","postMessage","msg","scripts","bundleScript","clientScript","configScript","handlerScript","script","join","createJsInject","manfiest","js","rewrite","text","rewriteCSS","contentType","mime","isHtml","rewriteHtml","document","injectHead","createHtmlInject","accept","crossOriginIsolated","Response","status","statusText","err","console","error","bareServer","title","code","message","id","Error","isBareError","trace","parsedFetchedURL","hostname","encodeURIComponent","hostnameErrorTemplate","errorTemplate","String","renderError","undefined","static","raw","key","rawHeaders","toLowerCase","val","worker","Object","fromEntries","entries","data","target","that","respondWith","input"],"sourceRoot":""}
